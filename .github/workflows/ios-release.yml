name: Build and Distribute

on:
  push:
    branches:
      - main

jobs:
  build:
    name: build
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2

      - uses: subosito/flutter-action@v1
        with:
          flutter-version: '3.27.3'
    
      - name: Setup Flutter Environment
        run: |
          flutter clean
          flutter pub get 
      
      # 清除 Xcode 缓存
      - name: Clean Xcode Cache
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData
          rm -rf ~/Library/Developer/Xcode/iOS\ DeviceSupport
          rm -rf ~/Library/Developer/Xcode/Archives
          rm -rf ~/Library/Developer/Xcode/Products

      # 添加 Xcode 版本选择
      - name: Select Xcode 16.2
        run: sudo xcode-select -s /Applications/Xcode_16.2.app

      # 设置 CocoaPods
      # - name: Setup CocoaPods
      #   run: |
      #     cd ios
      #     rm -rf Pods
      #     rm -f Podfile.lock
      #     pod install --repo-update
          
      # 添加详细的环境信息调试步骤
      - name: Print Environment Info
        run: |
          echo "============= Environment Variables ============="
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          FLUTTER_ROOT=$(which flutter | xargs dirname | xargs dirname)
          echo "FLUTTER_ROOT: $FLUTTER_ROOT"
          echo "FLUTTER_APPLICATION_PATH: $GITHUB_WORKSPACE"
          echo "Current Directory: $(pwd)"


      - uses: cedvdb/action-flutter-build-ios@v1
        with:
          build-cmd: |
            flutter build ipa --release --export-options-plist=ios/ExportOptions.plist --no-tree-shake-icons
          certificate-base64: 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

          certificate-password: 111111
          
          provisioning-profile-base64: 


          keychain-password: 111111

      # # 添加检查步骤
      - name: 检查构建文件
        run: |
          echo "检查 build/ios/ipa 目录内容："
          ls -la build/ios/ipa/
          echo "检查 build/ios 目录内容："
          ls -la build/ios/

      - name: Archive IPA
        uses: actions/upload-artifact@v4
        with:
          name: release-ipa
          path: build/ios/ipa

          
      # - name: Upload using iTMSTransporter
      #   env:
      #     WORKING_DIRECTORY: build/ios/ipa
      #     IPA_FILE_NAME: oiyo.ipa
      #     APPLE_USERNAME: Nina2000HH@outlook.com
      #     APPLE_PASSWORD: zeqo-kyio-mlkw-kbwf
      #     APPLE_ASC_PROVIDER: 798RL7J5U7
      #   run: |
      #     cd $WORKING_DIRECTORY
      #     git clone https://github.com/ZhangLi1984/itsm.git
      #     ./itsm/bin/iTMSTransporter -assetFile $IPA_FILE_NAME -u $APPLE_USERNAME -p $APPLE_PASSWORD -m upload -asc_provider $APPLE_ASC_PROVIDER -v verbose

      - name: Upload to App Store using altool
        env:
          IPA_PATH: "build/ios/ipa/moch.ipa"
          APPLE_ID: "crushly502@outlook.com"
          APP_SPECIFIC_PASSWORD: "iosh-dmzh-adsy-uqxc"
        run: |
          xcrun altool --upload-app -f "$IPA_PATH" \
            -t ios \
            -u "$APPLE_ID" \
            -p "$APP_SPECIFIC_PASSWORD" \
            --verbose
